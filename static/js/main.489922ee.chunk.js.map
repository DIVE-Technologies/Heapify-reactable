{"version":3,"sources":["Components/Btn.js","Components/Input.js","Assets/Images/Logo.png","Utils/LocalStorage.js","Components/PageHeading.js","config/baseUrl.js","Components/AuthRedirect.js","Utils/Validation.js","Pages/Login.js","Components/CodeSnippet.js","Components/Content.js","Components/Heading.js","Components/SubHeading.js","Assets/Images/ReactProject.png","Components/Image.js","Components/Footer.js","Pages/React-Able-Notes/Basics.js","Components/ContentCard.js","Pages/Dashboard.js","Components/Navbar/sidemenu/SideMenu.js","Components/Navbar/ToolBar.js","Components/Navbar/sidemenu/SideDrawer.js","Components/Navbar/backdrop/Backdrop.js","Pages/React-Able-Notes/JSX.js","Components/Navbar/Menu.js","Pages/React-Able-Notes/State-Props.js","Pages/React-Able-Notes/ElementsComponents.js","Components/TabSpace.js","Pages/React-Able-Notes/Styles.js","Pages/React-Able-Notes/DOM.js","Pages/React-Able-Notes/LifecycleMethods.js","Pages/React-Able-Notes/Hooks.js","Pages/React-Able-Notes/NpmArrayMethods.js","Pages/React-Able-Notes/EventHandling.js","Pages/React-Able-Notes/ConextAPI.js","Pages/React-Able-Notes/ReactRouter.js","Pages/React-Able-Notes/API.js","Pages/Signup.js","Routers/Routers.js","App.js","index.js"],"names":["Btn","props","loading","Button","style","width","variant","onClick","className","title","Input","InputGroup","Text","FormControl","type","placeholder","onChange","value","getLocalData","param","JSON","parse","localStorage","getItem","err","console","log","setLocalData","data","setItem","stringify","PageHeading","useHistory","useState","setUser","useEffect","Navbar","Container","Brand","src","Logo","alt","height","Nav","children","authUrl","AuthRedirect","history","msg","highlight","push","redirect","align","validateEmail","email","test","Login","setEmail","password","setPassword","error","setError","isLoading","setLoading","handleLogin","a","fetch","method","headers","Accept","body","result","status","json","user","name","role","message","Card","Body","Title","onSubmit","e","target","backgroundColor","CodeSnippet","Content","Heading","SubHeading","Image","Footer","Basics","href","listStyleType","Table","striped","bordered","hover","ReactProject","ContentCard","margin","map","index","Link","textDecoration","navigate","Home","menuToggleButton","click","toolbar","drawerToggleClickHandler","sideDrawer","drawerClasses","show","join","styles","position","top","left","background","zIndex","backdrop","JSX","React","Component","rel","StateProps","ElementsComponents","TabSpace","Styles","DOM","LifecycleMethods","Hooks","NpmArrayMethods","EventHandling","ConextAPI","ReactRouter","API","Signup","contactNumber","setContact","setName","confirmPassword","setConfirmPassword","validate","validatePhone","handleSignup","Routers","checkAuth","redirectToUrl","url","window","location","exact","path","render","to","component","ContextAPI","ReactGA","initialize","pageview","pathname","search","App","document","addEventListener","preventDefault","event","ctrlKey","which","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.489922ee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"./styles.css\";\r\n\r\nconst Btn = (props) => {\r\n  return props.loading ? (\r\n    <Button\r\n      style={{\r\n        width: props.width ? props.width : 130,\r\n      }}\r\n      variant={props.variant}\r\n      onClick={props.onClick}\r\n    >\r\n      <i className=\"fas fa-spinner loadingbtn\" />\r\n    </Button>\r\n  ) : (\r\n    <Button\r\n      style={{\r\n        width: 130,\r\n      }}\r\n      variant={props.variant}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.title}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Btn;\r\n","import React from \"react\";\r\nimport { FormControl, InputGroup } from \"react-bootstrap\";\r\n\r\nconst Input = (props) => {\r\n  return (\r\n    <InputGroup className=\"mt-4 mb-4\">\r\n      <InputGroup.Text>{props.title}</InputGroup.Text>\r\n      <FormControl\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","export default __webpack_public_path__ + \"static/media/Logo.37771044.png\";","export const getLocalData = (param) => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(`${param}`));\r\n  } catch (err) {\r\n    console.log(\"Error in local storage, \", err);\r\n  }\r\n};\r\n\r\nexport const setLocalData = (param, data) => {\r\n  try {\r\n    localStorage.setItem(param, JSON.stringify(data));\r\n    return;\r\n  } catch (err) {\r\n    console.log(\"Error in local storage, \", err);\r\n  }\r\n};\r\n\r\nexport const clearLocalData = () => {\r\n  try {\r\n    localStorage.clear();\r\n    return;\r\n  } catch (err) {\r\n    console.log(\"Error in local storage, \", err);\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Logo from \"../Assets/Images/Logo.png\";\r\nimport { Navbar, Container, Nav } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { clearLocalData, getLocalData } from \"../Utils/LocalStorage\";\r\n\r\nconst PageHeading = (props) => {\r\n  const history = useHistory();\r\n  const [user, setUser] = useState();\r\n\r\n  useEffect(() => {\r\n    setUser(getLocalData(\"heapifyUser\"));\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    clearLocalData();\r\n\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <Navbar className=\"fixed-top pageHeading text-light\">\r\n      <Container className=\"d-flex justify-content-between\">\r\n        <Navbar.Brand>\r\n          <img src={Logo} alt=\"Logo\" height=\"50\" width=\"50\" />\r\n        </Navbar.Brand>\r\n        <Nav className=\"mx-auto\">\r\n          <h1>{props.children}</h1>\r\n        </Nav>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default PageHeading;\r\n","export const authUrl = \"https://heapify-reactable.herokuapp.com/users\";\r\n","import React from \"react\";\r\nimport \"./AuthRedirect.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst AuthRedirect = (props) => {\r\n  const history = useHistory();\r\n  var msg = props.msg;\r\n  var highlight = props.title;\r\n  var push = props.redirect;\r\n\r\n  return (\r\n    <div align=\"center\">\r\n      {msg} &nbsp;\r\n      <span\r\n        onClick={() => {\r\n          history.push(`/${push}`);\r\n        }}\r\n        className=\"link-primary\"\r\n      >\r\n        {highlight}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthRedirect;\r\n","export const validateEmail = (email) => {\r\n  const expression = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n  return !expression.test(email);\r\n};\r\n\r\nexport const validatePhone = (contactNumber) => {\r\n  const expression = /^(\\+\\d{1,3}[- ]?)?\\d{10}$/;\r\n  return !expression.test(contactNumber);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Container, Card } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Btn from \"../Components/Btn\";\r\nimport Input from \"../Components/Input\";\r\nimport PageHeading from \"../Components/PageHeading\";\r\nimport { setLocalData } from \"../Utils/LocalStorage\";\r\nimport { authUrl } from \"../config/baseUrl\";\r\nimport AuthRedirect from \"../Components/AuthRedirect\";\r\nimport { validateEmail } from \"../Utils/Validation\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const validate = () => {\r\n    setError(\"\");\r\n    if (!email) {\r\n      setError(\"Email is required\");\r\n      return false;\r\n    } else if (!password) {\r\n      setError(\"Password is required\");\r\n      return false;\r\n    } else if (validateEmail(email)) {\r\n      setError(\"Invalid Email\");\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    if (validate()) {\r\n      let data = { email, password };\r\n      setLoading(true);\r\n\r\n      let result = await fetch(`${authUrl}/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (result.status === 200 || result.status === 201) {\r\n        result = await result.json();\r\n        const user = {\r\n          name: result.name,\r\n          email: result.email,\r\n          role: result.role,\r\n        };\r\n        setLocalData(\"heapifyUser\", user);\r\n\r\n        setLoading(false);\r\n        history.push(\"/dashboard\");\r\n        return result;\r\n      } else {\r\n        result = await result.json();\r\n        setLoading(false);\r\n        setError(result.message);\r\n        return result;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageHeading>Heapify React Able</PageHeading>\r\n      <Container className=\"pageSection d-flex justify-content-center align-items-center\">\r\n        <Card style={{ width: \"31rem\" }} className=\"shadow-lg\">\r\n          <Card.Body>\r\n            <Card.Title className=\"text-center\">Login</Card.Title>\r\n            <form type=\"submit\" onSubmit={handleLogin} className=\"text-center\">\r\n              <Input\r\n                title=\"Email\"\r\n                type=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                value={email}\r\n              />\r\n              <Input\r\n                title=\"Password\"\r\n                type=\"password\"\r\n                placeholder=\"Enter your password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                value={password}\r\n              />\r\n              {error ? (\r\n                <div\r\n                  className=\"text-danger mb-4 p-2 border border-danger\"\r\n                  style={{ backgroundColor: \"#fae8e8\" }}\r\n                >\r\n                  {error}\r\n                </div>\r\n              ) : null}\r\n              <Btn\r\n                variant=\"primary\"\r\n                onClick={handleLogin}\r\n                loading={isLoading}\r\n                title=\"Login\"\r\n              />\r\n            </form>\r\n            <AuthRedirect\r\n              msg=\"Don't have an account?\"\r\n              title=\"Sign up\"\r\n              redirect=\"signup\"\r\n            />\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react'\r\n\r\nconst CodeSnippet = (props) => {\r\n    return (\r\n        <div className='mb-3'>\r\n            <code>{props.children}</code>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CodeSnippet\r\n","import React from 'react'\r\n\r\nconst Content = (props) => {\r\n    return (\r\n        <p>\r\n            {props.children}\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react';\r\n\r\nconst Heading = (props) => {\r\n    return (\r\n        <h3>\r\n            {props.title}\r\n        </h3>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n","import React from 'react'\r\n\r\nconst SubHeading = (props) => {\r\n    return (\r\n        <h5>\r\n            {props.title}\r\n        </h5>\r\n    )\r\n}\r\n\r\nexport default SubHeading\r\n","export default __webpack_public_path__ + \"static/media/ReactProject.fc0f4698.png\";","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Image = (props) => {\r\n    return (\r\n        <Container className='text-center mt-3 mb-3'>\r\n            <img src={props.src} alt={props.alt} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Image\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='bg-dark text-light text-center p-3'>\r\n           &#169; Heapify React-Able, 2021\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\";\r\nimport { Container, Table } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport \"./styles.css\";\r\nimport ReactProject from \"../../Assets/Images/ReactProject.png\";\r\nimport Image from \"../../Components/Image\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\n\r\nconst Basics = () => {\r\n  return (\r\n    <div>\r\n    <PageHeading>Basics of React</PageHeading>\r\n    <Container className=\"pageSection\">\r\n      <ol>\r\n        <li className=\"listItem\">\r\n          <Heading title=\"Setting up the workspace with the IDE.\" />\r\n          <Content>\r\n            In order to work with React, we’ll be using the Visual Studio Code\r\n            editor. This is an IDE that has been provided by Microsoft.\r\n          </Content>\r\n          <SubHeading title=\"How to install VS Code\" />\r\n          <Content>\r\n            The complete installation process and the extensions to be used will\r\n            be discussed in the class.\r\n          </Content>\r\n          Refer to the video for installation of VS Code: <br />\r\n          <a href=\"https://youtu.be/9aj_Mz5zgRM\">\r\n            https://youtu.be/9aj_Mz5zgRM\r\n          </a>\r\n          <br />\r\n          Refer to the video for installing the required extensions:\r\n          <br />\r\n          <a href=\"https://youtu.be/sZYATPTYm_c\">\r\n            https://youtu.be/sZYATPTYm_c\r\n          </a>\r\n        </li>\r\n\r\n        <li>\r\n          <Heading title=\"What is React?\" />\r\n          <Content>\r\n            React is a free and open-source front-end JavaScript library for\r\n            building user interfaces or UI components. It is maintained by\r\n            Facebook (launched in 2013) and a community of individual developers\r\n            and companies. React can be used as a base in the development of\r\n            single-page or mobile applications.\r\n          </Content>\r\n          <Content>\r\n            React allows developers to create large web applications that can\r\n            change data, without reloading the page. The main purpose of React\r\n            is to be fast, scalable, and simple. React could be run on online\r\n            platforms like Codepen, CodeSandbox, etc.\r\n          </Content>\r\n        </li>\r\n\r\n        <li className=\"listItem\">\r\n          <Heading title=\"Benefits of React\" />\r\n          <p>\r\n            How do we compare React with other frameworks? They are not\r\n            interchangeable and each one has pros and cons depending on what we\r\n            are trying to achieve. So here, we’ll get to learn about the\r\n            benefits of React and will see why we should learn it. We’ll only\r\n            get to know about all the features in short, but will be covering\r\n            all of them very deeply in the coming classes.\r\n          </p>\r\n          <ul style={{ listStyleType: \"disc\" }}>\r\n            <li className=\"listItem\">\r\n              <SubHeading title=\"Reusable Components\" />\r\n              <Content>\r\n                Components are wonderful and React is based on them. We start\r\n                with small things, which we use to build bigger things, which we\r\n                use to build apps. Each component has its own logic and controls\r\n                its own rendering, and can be reused wherever we need them. Code\r\n                reuse helps make our apps easier to develop and easier to\r\n                maintain. They also help us implement a consistent look and feel\r\n                across the whole project.\r\n              </Content>\r\n            </li>\r\n            <li className=\"listItem\">\r\n              <SubHeading title=\"The Virtual DOM\" />\r\n              <Content>\r\n                Normally, when we develop an app that has a lot of user\r\n                interaction and data updates, we have to carefully consider how\r\n                our app structure is going to impact performance. Even with fast\r\n                client platforms and JavaScript engines, extensive DOM\r\n                manipulation can be a performance bottle-neck and even result in\r\n                an annoying user experience. Worse, because the DOM is\r\n                tree-structured, simple changes at the top level can cause huge\r\n                ripples to the user interface.\r\n              </Content>\r\n              <Content>\r\n                React solves this by using a virtual DOM. This is, as the name\r\n                implies, a virtual representation of the DOM. Any new view\r\n                changes are first performed on the virtual DOM, which lives in\r\n                memory and not on your screen. An efficient algorithm then\r\n                determines the changes made to the virtual DOM to identify the\r\n                changes that need to be made to the real DOM. It then determines\r\n                the most effective way to make these changes and then applies\r\n                only those changes to the real DOM.\r\n              </Content>\r\n            </li>\r\n            <li className=\"listItem\">\r\n              <SubHeading title=\"Using JSX\" />\r\n              <Content>\r\n                JSX is really just a mix of HTML and JavaScript. It lets us add\r\n                bits of HTML to our JavaScript. This lets us come up with a much\r\n                simpler and cleaner code. JSX produces React “elements” and has\r\n                a number of side benefits, including helping prevent injection\r\n                attacks. To be fair, there are raging debates on whether JSX is\r\n                a good thing because it makes coding easier, or a bad thing\r\n                because it may or may not violate the separation of concerns.\r\n              </Content>\r\n            </li>\r\n            <li className=\"listItem\">\r\n              <SubHeading title=\"React Native for Mobile App development\" />\r\n              <Content>\r\n                React can be boldly called a “learn once – write anywhere”\r\n                library, since both web and mobile application development\r\n                follows the same design patterns, facilitating the transition\r\n                process. Using plain JavaScript and React we are able to build a\r\n                rich UI for native apps, supported by both iOS and Android\r\n                platforms.\r\n              </Content>\r\n              <Content>\r\n                Among other advantages of React js in mobile app development,\r\n                React Native developers recite its portability and ability to\r\n                reuse components, real-time reload, and open source. When it\r\n                comes to the actual use of React Native, we can list such mobile\r\n                apps as Skype, Tesla, Airbnb, and Walmart. And don't forget\r\n                about Instagram and Facebook – the actual innovators and early\r\n                adopters.\r\n              </Content>\r\n            </li>\r\n            <li className=\"listItem\">\r\n              <SubHeading title=\"SEO Friendly\" />\r\n              <Content>\r\n                Another Reactjs benefit is its ability to deal with a common\r\n                search engine failure to read JavaScript-heavy apps. As a\r\n                solution, React can run on the server, rendering and returning\r\n                the virtual DOM to the browser as a regular webpage.\r\n              </Content>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <Heading title=\"ReactJs vs React-Native\" />\r\n          <Table striped bordered hover className=\"text-left\">\r\n            <thead>\r\n              <tr className=\"text-center\">\r\n                <th>ReactJs</th>\r\n                <th>React Native</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>Used for developing Web applications. </td>\r\n                <td>Used for developing mobile applications.</td>\r\n              </tr>\r\n              <tr>\r\n                <td>Animations could be added using JavaScript and CSS.</td>\r\n                <td>Animations are added using built-in libraries.</td>\r\n              </tr>\r\n              <tr>\r\n                <td>It uses HTML tags.</td>\r\n                <td>It doesn’t use HTML tags.</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  In ReactJs, Virtual DOM is responsible for rendering the code\r\n                  on the browser.\r\n                </td>\r\n                <td>\r\n                  Uses its native API to render the code on the mobile\r\n                  application.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>CSS is used for adding styles.</td>\r\n                <td>Uses stylesheet to add the styles.</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  ReactJs is platform-independent i.e. it can be executed on all\r\n                  platforms.\r\n                </td>\r\n                <td>\r\n                  It is not platform independent, a lot of effort is needed to\r\n                  run it on several platforms.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>Provides high security.</td>\r\n                <td>Less secure as compared to ReactJs.</td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </li>\r\n        <li>\r\n          <Heading title=\"Installing React into the machine\" />\r\n          <Content>\r\n            Till now we have seen what React is and why we should use it and\r\n            what are its benefits. So, now let’s proceed to the actual working\r\n            and let’s install React in our machine. To install the full React\r\n            toolchain, we would be using create-react-app.\r\n          </Content>\r\n          <Content>\r\n            In order to install create-react-app, run the following command in\r\n            your terminal:\r\n          </Content>\r\n          <CodeSnippet>npm install -g create-react-app</CodeSnippet>\r\n          <Content>\r\n            This command will install create-react-app in your system globally.\r\n            Once this is done, we are ready to create our first react project.\r\n            In order to do so, follow the below commands -\r\n          </Content>\r\n          <CodeSnippet>npx create-react-app {\"{project_name}\"}</CodeSnippet>\r\n          <Content>\r\n            The above command will generate a template react project for you to\r\n            begin with. Simply replace the {\"{project_name}\"} with the name of\r\n            your own project. The contents of the project that you will get\r\n            after running the above command are shown below:\r\n          </Content>\r\n          <Image src={ReactProject} alt=\"Contents of React document\" />\r\n          <Content>Then navigate to the project directory using</Content>\r\n          <CodeSnippet>cd my-app</CodeSnippet>\r\n          <Content>\r\n            Now to start the react project, run the following command in the\r\n            same terminal.\r\n          </Content>\r\n          <CodeSnippet>npm start</CodeSnippet>\r\n          <Content>\r\n            By running the above command, your react project will start running\r\n            on localhost:3000 and will open automatically in your default\r\n            browser. Now you are all set. You have installed react and have also\r\n            initialized your very first project.\r\n          </Content>\r\n        </li>\r\n      </ol>\r\n    </Container>\r\n    <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basics;\r\n","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst ContentCard = (props) => {\r\n  return (\r\n    <Card style={{ width: \"18rem\", margin: 10 }} className=\"shadow-lg\">\r\n      <Card.Body className=\"d-flex flex-column justify-content-between\">\r\n        <div>\r\n          <Card.Title>{props.title}</Card.Title>\r\n          <Card.Text>\r\n            <ul>\r\n              {props.data.map((data, index) => (\r\n                <li key={index}>{data}</li>\r\n              ))}\r\n            </ul>\r\n          </Card.Text>\r\n        </div>\r\n        <Card.Link style={{ textDecoration: \"none\" }} onClick={props.navigate}>\r\n          Resources\r\n        </Card.Link>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ContentCard;\r\n","import React from \"react\";\r\nimport PageHeading from \"../Components/PageHeading\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\nimport ContentCard from \"../Components/ContentCard\";\r\nimport Footer from \"../Components/Footer\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n      <PageHeading>Heapify ReactAble</PageHeading>\r\n      <Container className=\"d-flex flex-wrap justify-content-center pageSection\">\r\n        <ContentCard\r\n          title=\"Basics & Installation\"\r\n          navigate={() => history.push(\"/ReactAble/basics\")}\r\n          data={[\r\n            \"What is React?\",\r\n            \"Benefits of React\",\r\n            \"Installation\",\r\n            \"Writing First React Project\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"Elements & Components\"\r\n          navigate={() => history.push(\"/ReactAble/elements-components\")}\r\n          data={[\r\n            \"Elements\",\r\n            \"Components\",\r\n            \"Class Components\",\r\n            \"Functional Components\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"JSX\"\r\n          navigate={() => history.push(\"/ReactAble/JSX\")}\r\n          data={[\"createElement()\", \"What is JSX?\", \"Features of JSX\"]}\r\n        />\r\n        <ContentCard\r\n          title=\"State & Props\"\r\n          navigate={() => history.push(\"/ReactAble/state-props\")}\r\n          data={[\r\n            \"What is State?\",\r\n            \"How to use and manage state?\",\r\n            \"Props\",\r\n            \"Use of super keyword\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"Styles in React\"\r\n          navigate={() => history.push(\"/ReactAble/Styles\")}\r\n          data={[\r\n            \"Inline styles\",\r\n            \"JavaScript Object\",\r\n            \"CSS stylesheet\",\r\n            \"CSS Modules\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"DOM & Virtual DOM\"\r\n          navigate={() => history.push(\"/ReactAble/DOM\")}\r\n          data={[\r\n            \"What is DOM?\",\r\n            \"What is Virtual DOM?\",\r\n            \"Working of Virtual DOM\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"Lifecycle Methods\"\r\n          navigate={() => history.push(\"/ReactAble/lifecycle-methods\")}\r\n          data={[\r\n            \"What are Lifecycle Methods?\",\r\n            \"Mounting Phase\",\r\n            \"Updating Phase\",\r\n            \"Unmounting Phase\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"React Hooks\"\r\n          navigate={() => history.push(\"/ReactAble/hooks\")}\r\n          data={[\r\n            \"What are React Hooks?\",\r\n            \"Use of React Hooks\",\r\n            \"Various React Hooks\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"Npm & Array methods\"\r\n          navigate={() => history.push(\"/ReactAble/npm-array-methods\")}\r\n          data={[\r\n            \"What are npm packages?\",\r\n            \"map & filter methods\",\r\n            \"Lists & Keys\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"Event Handling\"\r\n          navigate={() => history.push(\"/ReactAble/event-handling\")}\r\n          data={[\"Handling events in React\", \"What are synthetic events?\"]}\r\n        />\r\n        <ContentCard\r\n          title=\"Context API\"\r\n          navigate={() => history.push(\"/ReactAble/context-API\")}\r\n          data={[\r\n            \"What is Context API?\",\r\n            \"createContext\",\r\n            \"Providers\",\r\n            \"Consumers\",\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"React Router\"\r\n          navigate={() => history.push(\"/ReactAble/react-router\")}\r\n          data={[\r\n            \"What is React Router?\",\r\n            \"Installation\",\r\n            \"Routes\",\r\n            \"Route Matchers\",\r\n            \"Route Changers\"\r\n          ]}\r\n        />\r\n        <ContentCard\r\n          title=\"APIs\"\r\n          navigate={() => history.push(\"/ReactAble/API\")}\r\n          data={[\r\n            \"What are APIs?\",\r\n            \"Fetch & Axios\",\r\n            \"HTTP methods\",\r\n            \"Status codes\",\r\n          ]}\r\n        />\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./SideMenu.css\";\r\n\r\nconst menuToggleButton = (props) => (\r\n  <button className=\"toggle-button\" onClick={props.click}>\r\n    <div className=\"toggle-button-line\" />\r\n    <div className=\"toggle-button-line\" />\r\n    <div className=\"toggle-button-line\" />\r\n  </button>\r\n);\r\n\r\nexport default menuToggleButton;\r\n","import React from \"react\";\r\nimport SideMenu from \"./sidemenu/SideMenu\";\r\nimport \"./ToolBar.css\";\r\nimport Logo from \"../../Assets/Images/Logo.png\";\r\nimport Btn from \"../Btn\";\r\n\r\nconst toolbar = (props) => (\r\n  <header className=\"toolbar\">\r\n    <nav className=\"toolbar_navigator\">\r\n      <div />\r\n      <div className=\"toolbar_logo\">\r\n        <a href=\"/\">\r\n          <img src={Logo} alt=\"Logo\" height=\"50\" width=\"50\" />\r\n        </a>\r\n      </div>\r\n      <div className=\"spacer\" />\r\n      <div className=\"toolbar_navigation-items\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"/\">About</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/user\">Features</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/music\">Programs</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/music\">Contact Us</a>\r\n          </li>\r\n          <li>\r\n            <Btn\r\n              // onClick={handleLogin}\r\n              // loading={isLoading}\r\n              title=\"Login\"\r\n            />\r\n            {/* <a href=\"/music\">Login</a> */}\r\n          </li>{\" \"}\r\n          {/* will be made as a btn */}\r\n        </ul>\r\n      </div>\r\n      <div className=\"toggle-btn\">\r\n        <SideMenu click={props.drawerToggleClickHandler} />\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default toolbar;\r\n","import React from \"react\";\r\nimport \"./SideDrawer.css\";\r\n\r\nconst sideDrawer = (props) => {\r\n  let drawerClasses = [\"side-drawer\"];\r\n\r\n  if (props.show) {\r\n    drawerClasses = [\"side-drawer\", \"open\"];\r\n  }\r\n\r\n  return (\r\n    <nav className={drawerClasses.join(\" \")}>\r\n      <ul>\r\n        <li>\r\n          <a href=\"/\">About</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/user\">Features</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/music\">Programs</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/music\">Contact Us</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/music\">Login</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default sideDrawer;\r\n","import React from \"react\";\r\n\r\nconst backdrop = (props) => <div style={styles} onClick={props.click} />;\r\n\r\nconst styles = {\r\n  position: \"fixed\",\r\n  top: 0,\r\n  left: 0,\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  background: \"rgba(0, 0, 0, 0.4)\",\r\n  zIndex: 1,\r\n};\r\nexport default backdrop;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\n\r\nconst JSX = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>JSX</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"React.createElement()\" />\r\n            <Content>\r\n              Initially when React was launched, the syntax for writing elements\r\n              was very complex because it used .createElement():\r\n            </Content>\r\n            <CodeSnippet>\r\n              React.createElement(type, [props], [children])\r\n            </CodeSnippet>\r\n            <Content>\r\n            This is the syntax for React.createElement function. Let’s take a\r\n            deeper look at the parameters that are being passed to it.</Content>\r\n            <ul className=\"listItem\">\r\n              <li>\r\n                Type is an HTML tag like h1, div or it can be a React component\r\n                as well.\r\n              </li>\r\n              <li>\r\n                Props are the attributes that we want the element to have. They\r\n                could be the className or any other prop.\r\n              </li>\r\n              <li>\r\n                Children contain other HTML elements or a component. These are\r\n                the child elements of this element/component.\r\n              </li>\r\n            </ul>\r\n            <Content>\r\n              In order to create a list with just 2 elements, we have to write a\r\n              lot of code.\r\n            </Content>\r\n            <CodeSnippet>\r\n              React.createElement(\"ul\",{'{}'},[React.createElement(\"li\",{'{}'},\"First Element\"),React.createElement(\"li\",{'{}'},\"Second element\")]);\r\n            </CodeSnippet>\r\n            <Content>\r\n              This syntax of code becomes very complicated in case of complex\r\n              applications with hundreds of thousands lines of code. So, in\r\n              order to solve this, the concept of JSX was introduced.\r\n            </Content>\r\n          </li>\r\n\r\n          <li>\r\n            <Heading title=\"What is JSX?\" />\r\n            <Content>\r\n              JSX stands for JavaScript XML. It allows us to write HTML in\r\n              React. It converts HTML tags into react elements. JSX allows us to\r\n              write HTML elements in JavaScript and place them in the DOM\r\n              without any createElement() method. Every JSX is converted to the\r\n              React.createElement function call that the browser understands.\r\n            </Content>\r\n            <Container>\r\n              <SubHeading title=\"Without JSX\" />\r\n              <CodeSnippet>\r\n                const element=React.createElement(\"h1\",{},I love Heapify ReactAble!!); ReactDOM.render(element,document.getElementById(\"root\"));\r\n              </CodeSnippet>\r\n              <SubHeading title=\"With JSX\" />\r\n              <CodeSnippet>\r\n                const element={\"<h1>\"}I love Heapify ReactAble!!{\"</h1>\"};\r\n                ReactDOM.render(element, document.getElementById('root'));\r\n              </CodeSnippet>\r\n            </Container>\r\n            <Content>\r\n              JSX is an extension of the JavaScript language based on ES6, and\r\n              is translated into regular JavaScript at runtime. With JSX we can\r\n              write expressions inside curly braces {}. The expression can be a\r\n              React variable, or property, or any other valid JavaScript\r\n              expression. JSX will execute the expression and return the result.\r\n            </Content>\r\n            <CodeSnippet>\r\n              const element = {\"<h1>\"}React is {\"{5 + 5}\"} times better with JSX\r\n              {\"</h1>\"};\r\n            </CodeSnippet>\r\n            <Content>\r\n              We can use conditional statements inside JSX. In order to do so,\r\n              we should put the if statements outside of the JSX, or use a\r\n              ternary expression instead:\r\n            </Content>\r\n            <CodeSnippet>\r\n              const element ={\" \"}\r\n              {'<h1>{(greet) !== \"formal\" ? \"Hey!\" : \"Hello!\"}</h1>'}\r\n            </CodeSnippet>\r\n            <Content>\r\n              The browser does not understand the JSX because it's not a valid\r\n              JavaScript code. This is because we're assigning an HTML tag to a\r\n              variable that is not a string but just HTML code. So to convert it\r\n              to browser understandable JavaScript code, we use a tool like\r\n              Babel which is a JavaScript compiler/transpiler.\r\n            </Content>\r\n            <strong>Note</strong>: For more information on babel, please refer:{\" \"}\r\n            <a rel=\"noreferrer\" target=\"_blank\" href=\"https://babeljs.io/\">\r\n              babel\r\n            </a>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JSX;\r\n","import React from \"react\";\r\nimport Toolbar from \"./ToolBar\";\r\nimport SideDrawer from \"./sidemenu/SideDrawer\";\r\nimport BackDrop from \"./backdrop/Backdrop\";\r\n\r\nclass Menu extends React.Component {\r\n  state = {\r\n    sideDrawerOpen: false,\r\n  };\r\n\r\n  drawerToggleClickHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\r\n    });\r\n  };\r\n  backDropClickHandler = () => {\r\n    this.setState({ sideDrawerOpen: false });\r\n  };\r\n\r\n  render() {\r\n    let backdrop;\r\n\r\n    if (this.state.sideDrawerOpen) {\r\n      backdrop = <BackDrop click={this.backDropClickHandler} />;\r\n    }\r\n\r\n    return (\r\n      <div style={{ height: \"100%\" }}>\r\n        <Toolbar drawerToggleClickHandler={this.drawerToggleClickHandler} />\r\n        <SideDrawer show={this.state.sideDrawerOpen} />\r\n        {backdrop}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\n\r\nconst StateProps = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>State And Props</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What is State\" />\r\n            <Content>\r\n              The state is an instance of React Component Class that can be\r\n              defined as an object of a set of observable properties that\r\n              control the behavior of the component. In other words, the State\r\n              of a component is an object that holds some information that may\r\n              change over the lifetime of the component. A state is an\r\n              observable object that is to be used to hold data that may change\r\n              over time and to control the behavior after each change. States\r\n              can only be used in Class Components (there are some exceptions to\r\n              this which we will study in the further topics). The state object\r\n              is initialized in the constructor:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\r\n                \"constructor(props) { super(props); this.state = {attribute: value};}\"\r\n              }\r\n            </CodeSnippet>\r\n            <Content>\r\n              In order to refer to the state object anywhere in the component,\r\n              we use the this.state.property syntax.\r\n            </Content>\r\n            <CodeSnippet>this.state.attribute</CodeSnippet>\r\n          </li>\r\n\r\n          <li>\r\n            <Heading title=\"How to manage the state?\" />\r\n            <Content>\r\n              React provides its own method setState() to update the state.\r\n              setState() method takes a single parameter and expects an object\r\n              which should contain the set of values to be updated. Once the\r\n              update is done the method implicitly calls the render() method to\r\n              repaint the page. So, the correct method of updating the value of\r\n              a state is:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {'this.setState({attribute: \"new-value\"})'}\r\n            </CodeSnippet>\r\n            <Content>or</Content>\r\n            <CodeSnippet>\r\n              {\r\n                'this.setState({attribute1: \"new-value\", attribute2: “new-value”});'\r\n              }\r\n            </CodeSnippet>\r\n            <Content>\r\n              React is highly efficient and thus uses asynchronous state updates\r\n              i.e. React may update multiple setState() updates in a single go.\r\n              Thus using the value of the current state may not always generate\r\n              the desired result. For example: If we have to update the counter\r\n              by 1 each time the button is clicked, one way could be to get the\r\n              current state value and increment it by 1.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"this.setState({counter: this.state.count });\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              But the above method will produce unexpected results sometimes\r\n              because of the asynchronous behaviour of setState(). The correct\r\n              way would be to access the previous state and update it by 1.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\r\n                \"this.setState((prevState, props) => ({counter: prevState.count}));\"\r\n              }\r\n            </CodeSnippet>\r\n          </li>\r\n\r\n          <li>\r\n            <Heading title=\"Props\" />\r\n            <Content>\r\n              Props is a special keyword in React, which stands for properties\r\n              and is being used for passing data from one component to another.\r\n              Props are passed as HTML attributes to the Components. This could\r\n              be considered like passing parameters to a JavaScript function and\r\n              then using that value inside the function.\r\n            </Content>\r\n            <CodeSnippet>{'const element = <Car brand=\"Ford\" />'}</CodeSnippet>\r\n            <Content>\r\n              The brand value passed in the Car component is a prop. This value\r\n              could be access inside the Car component as:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\r\n                \"render() {return <h2>The value of the prop is: {this.props.brand}!</h2>;}\"\r\n              }\r\n            </CodeSnippet>\r\n            <Content>\r\n              Furthermore, props' data is read-only, which means that data\r\n              coming from the parent should not be changed by child components.\r\n              If the React component has a constructor function, the props\r\n              should always be passed to the constructor and also to the\r\n              React.Component via the super() method.\r\n            </Content>\r\n            <CodeSnippet>{\"constructor(props) {super(props);}\"}</CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Use of super keyword\" />\r\n            <Content>\r\n              In JavaScript, super refers to the parent class constructor. In a\r\n              React class, it points to the React.Component implementation.\r\n              Importantly, we can’t use this in a constructor until after we’ve\r\n              called the parent constructor. So, if taken a look closely we’ll\r\n              get to know that we can’t use this.props inside the constructor.\r\n              So props are passed inside super so that the base React.Component\r\n              constructor can initialize this.props and we can use them inside\r\n              the constructor. But somehow, even if we call super() without the\r\n              props argument, we’ll still be able to access this.props in the\r\n              srender and other methods. And this is because React also assigns\r\n              props on the instance right after calling the constructor. But\r\n              still we should always pass props to super because it’s still\r\n              confusing. Although, React would later assign this.props after the\r\n              constructor has run. But this.props would still be undefined\r\n              between the super call and the end of the constructor. It can be\r\n              even more challenging to debug if this happens in some method\r\n              that’s called from the constructor.\r\n            </Content>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StateProps;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\n\r\nconst ElementsComponents = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Elements & Components</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li>\r\n            <Heading title=\"Elements\" />\r\n            <Content>\r\n              An element is a plain object describing a component instance or\r\n              DOM node and its desired properties. It contains information only\r\n              about the component type (eg: a button), its properties, and any\r\n              child element inside it. In simple words, an element is a way to\r\n              tell React what you want to see on the screen. You cannot call any\r\n              methods on the element. It’s just an immutable description object.\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Components\" />\r\n            <Content>\r\n              A React Component is a template, a blueprint, a global definition.\r\n              This can be either a function or a class. If the component is a\r\n              functional one, then it returns an element, but if the component\r\n              is a Class one then it renders the element. In simple words, it is\r\n              a function or class that accepts an input(props) and returns a\r\n              React element. React components are independent and reusable\r\n              blocks of code.\r\n            </Content>\r\n            <Content>\r\n              A React component can have methods and can also receive props as\r\n              well. Components also have the state which they use to display\r\n              dynamic content. React components are of two types:\r\n            </Content>\r\n            <ul style={{ listStyleType: \"circle\" }}>\r\n              <li>Class components</li>\r\n              <li>Functional components</li>\r\n            </ul>\r\n            <b>Note:</b> The name of a React Component must start with a capital\r\n            letter.\r\n            <ul style={{ listStyleType: \"disc\" }}>\r\n              <li>\r\n                <SubHeading title=\"Class Components\" />\r\n                <Content>\r\n                  React class-based components are the bread and butter of most\r\n                  modern web apps built in ReactJS. These components are simple\r\n                  classes (made up of multiple functions that add functionality\r\n                  to the application). All class-based components are child\r\n                  classes for the Component class of ReactJS. So, the component\r\n                  has to include the extends React.Component statement, this\r\n                  statement creates an inheritance to React.Component, and gives\r\n                  the component access to React.Component's functions. Class\r\n                  components also require a render() method, which returns the\r\n                  code to be displayed i.e. JSX. The main feature of class-based\r\n                  components is that they have access to a state which dictates\r\n                  the current behavior and appearance of the component. This\r\n                  state can be modified by calling the setState() function. One\r\n                  or more variables, arrays, or objects defined as part of the\r\n                  state can be modified at a time with the setState() function.\r\n                  Class-based components also have access to Lifecycle methods.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Functional Components\" />\r\n                <Content>\r\n                  Functional components are just simple JavaScript functions. We\r\n                  can create a functional component in React by writing a simple\r\n                  JavaScript function. These functions may or may not receive\r\n                  data as parameters(props). In the functional Components, the\r\n                  return value is the JSX code to render to the DOM tree.\r\n                  Functional components lack a significant amount of features as\r\n                  compared to class-based components. So, in February 2019 React\r\n                  16.8 was launched which introduced the concept of React Hooks.\r\n                  Hooks are special functions that added a lot of missing\r\n                  functionalities in the functional components. Functional\r\n                  components do not have access to dedicated state variables\r\n                  like class-based components, this was one of the problems that\r\n                  were overcome by the introduction of hooks.\r\n                </Content>\r\n                <Content>\r\n                  Class-based components are slightly slower than their\r\n                  functional counterparts. The difference is very small and is\r\n                  almost negligible for smaller web apps – though the\r\n                  performance difference increases when the number of components\r\n                  in the app increases. Moreover, class-based components involve\r\n                  a lot more coding on the programmer’s part, making them\r\n                  slightly more inefficient to use. And hence, functional\r\n                  components are some of the more common components that you’ll\r\n                  come across while working in React.\r\n                </Content>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElementsComponents;\r\n","import React from \"react\";\r\n\r\nconst TabSpace = () => {\r\n  return <span>&emsp;</span>;\r\n};\r\n\r\nexport default TabSpace;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst Styles = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Styles in React</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <Content>\r\n          There are several ways in which we can add styles to our React\r\n          project. All of them are listed below.\r\n        </Content>\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"Inline styles\" />\r\n            <Content>\r\n              To style an element with the inline style attribute, the value is\r\n              passed a JavaScript object. Incase of the styles that use -, they\r\n              are converted to a camelCase property and then passed in the\r\n              object.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\r\n                '<h1 style={{backgroundColor: \"lightblue\", color: “red”}}>I love Heapify ReactAble!!</h1>'\r\n              }\r\n            </CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"JavaScript Object\" />\r\n            <Content>\r\n              We can also create an object with styling information, and refer\r\n              to it in the style attribute inside the Component.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"render() {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\r\n                'const mystyle = {color: \"white\",backgroundColor: \"blue\",padding: \"10px\"};'\r\n              }\r\n              <br />\r\n              <TabSpace />\r\n              {\r\n                \"return (<div><h1 style={mystyle}>I love Heapify ReactAbel!!</h1><p>Hello World!!</p></div>);\"\r\n              }\r\n              <br /> {\"}\"}\r\n            </CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"CSS stylesheet\" />\r\n            <Content>\r\n              We can write the CSS styling in a separate file, and just save the\r\n              file with the .css file extension, and then import it in our\r\n              application. This is the general convention that we all have\r\n              followed till now while working. But this way of adding styles\r\n              might cause some problems as it will create global styles. So, the\r\n              styles added via this method will apply to all the child components \r\n              irrespective of whether they are imported or not.\r\n            </Content>\r\n            <Content>\r\n              For example: If we have added some styles to ul tag, then those\r\n              styles will be applicable to all the child components as well. So, in\r\n              order to overcome this problem, we have another way of importing\r\n              the files.\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"CSS Modules\" />\r\n            <Content>\r\n              CSS Modules are convenient for components that are placed in\r\n              separate files. The CSS inside a module is available only for the\r\n              component that imported it, and we do not have to worry about name\r\n              conflicts. We can create a CSS module with the{\" \"}\r\n              <strong>.module.css</strong> extension and import the stylesheet\r\n              in our component.\r\n            </Content>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Styles;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\n\r\nconst DOM = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>DOM & Virtual DOM</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What is DOM?\" />\r\n            <Content>\r\n              DOM Stands for Document Object Model. When a web page is loaded,\r\n              the browser creates a Document Object Model of the page. The W3C\r\n              Document Object Model (DOM) is a platform and language-neutral\r\n              interface that allows programs and scripts to dynamically access\r\n              and update the content, structure, and style of a document. It is\r\n              a structured representation of the HTML elements that are present\r\n              in a webpage or web-app. DOM represents the entire UI of your\r\n              application. The DOM is represented as a tree data structure. It\r\n              contains a node for each UI element present in the web document.\r\n              <br />\r\n              It defines:\r\n              <ul style={{ listStyleType: \"disc\" }}>\r\n                <li className=\"listItem\">The HTML elements as objects</li>\r\n                <li className=\"listItem\">\r\n                  The properties of all HTML elements\r\n                </li>\r\n                <li className=\"listItem\">\r\n                  The methods to access all HTML elements\r\n                </li>\r\n                <li className=\"listItem\">The events for all HTML elements</li>\r\n              </ul>\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"What is Virtual DOM?\" />\r\n            <Content>\r\n              In React, for every DOM object, there is a corresponding virtual\r\n              DOM object. A virtual DOM object is a representation of a DOM\r\n              object, like a lightweight copy. A virtual DOM object has the same\r\n              properties as a real DOM object, but it lacks the real thing’s\r\n              power to directly change what’s on the screen. Manipulating the\r\n              DOM is slow. Manipulating the virtual DOM is much faster, because\r\n              nothing gets drawn on screen. Think of manipulating the virtual\r\n              DOM as editing a blueprint, as opposed to moving rooms in an\r\n              actual house.\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Working of Virtual DOM\" />\r\n            <Content>\r\n              In react, everything is treated as a component be it a functional\r\n              component or class component. A component can contain a state.\r\n              Each time we change something in our JSX file or let’s put it in\r\n              simple terms, whenever the state of any component is changed,\r\n              react updates it’s Virtual DOM tree. Though it may sound that it\r\n              is ineffective, the cost is not very significant as updating the\r\n              virtual DOM doesn’t take much time. React maintains two Virtual\r\n              DOM at each time, one contains the updated Virtual DOM and one\r\n              which is just the pre-update version of this updated Virtual DOM.\r\n            </Content>\r\n            <Content>\r\n              Now it compares the pre-update version with the updated Virtual\r\n              DOM and figures out what exactly has changed in the DOM like which\r\n              components have been changed. This process of comparing the\r\n              current Virtual DOM tree with the previous one is known as{\" \"}\r\n              <strong>diffing.</strong> Once React finds out what exactly has\r\n              changed then it updates those objects only, on real DOM. The\r\n              changes to the real DOM are sent in batches instead of sending any\r\n              update for a single change in the state of a component. We know\r\n              that the re-rendering of the UI is the most expensive part and\r\n              React manages to do this most efficiently by ensuring that the\r\n              Real DOM receives batch updates to re-render the UI. This entire\r\n              process of transforming changes to the real DOM is called{\" \"}\r\n              <strong>Reconciliation.</strong>\r\n            </Content>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DOM;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst LifecycleMethods = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Lifecycle Methods</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What are Lifecycle Methods?\" />\r\n            <Content>\r\n              Each component has several lifecycle methods that we can override\r\n              to run code at particular times in the process. These three phases\r\n              are: <strong>Mounting</strong>, <strong>Updating</strong>, and{\" \"}\r\n              <strong>Unmounting.</strong>\r\n              <ul style={{ listStyleType: \"circle\" }}>\r\n                <li>\r\n                  <strong>Mounting:</strong> Mounting means putting elements\r\n                  into the DOM. These methods are called in the following order\r\n                  when an instance of a component is being created and inserted\r\n                  into the DOM:\r\n                  <ul style={{ listStyleType: \"disc\" }}>\r\n                    <li>constructor()</li>\r\n                    <li>getDerivedStateFromProps()</li>\r\n                    <li>render()</li>\r\n                    <li>componentDidMount()</li>\r\n                  </ul>\r\n                </li>\r\n                <li>\r\n                  <strong>Updating:</strong> The next phase in the life cycle is\r\n                  when a component is updated. A component is updated whenever\r\n                  there is a change in the component's state or props. These\r\n                  methods are called in the following order when a component is\r\n                  being re-rendered:\r\n                  <ul style={{ listStyleType: \"disc\" }}>\r\n                    <li>getDerivedStateFromProps()</li>\r\n                    <li>shouldComponentUpdate()</li>\r\n                    <li>render()</li>\r\n                    <li>getSnapshotBeforeUpdate()</li>\r\n                    <li>componentDidUpdate()</li>\r\n                  </ul>\r\n                </li>\r\n                <li className=\"listItem\">\r\n                  <strong>Unmounting:</strong> The next phase in the life cycle\r\n                  is when a component is removed from the DOM. There is only one\r\n                  method in this phase.\r\n                  <ul style={{ listStyleType: \"disc\" }}>\r\n                    <li>componentWillUnmount()</li>\r\n                  </ul>\r\n                </li>\r\n              </ul>\r\n              Now we’ll see each of the above lifecycle methods in detail.\r\n            </Content>\r\n          </li>\r\n          <ul style={{ listStyleType: \"disc\" }}>\r\n            <li>\r\n              <SubHeading title=\"constructor()\" />\r\n              <Content>\r\n                The constructor for a React component is called before the\r\n                component is mounted. When implementing the constructor for a\r\n                React.Component subclass, we should call super(props) before any\r\n                other statement. Otherwise, this.props will be undefined in the\r\n                constructor, which can lead to bugs. Constructor is the natural\r\n                place to set up the initial state and other initial values.\r\n              </Content>\r\n              <CodeSnippet>\r\n                {\"constructor(props) {\"}\r\n                <br />\r\n                <TabSpace />\r\n                {\"super(props);\"}\r\n                <br />\r\n                <TabSpace />\r\n                {\"this.state = {count: 0};\"}\r\n                <br />\r\n                {\"}\"}\r\n              </CodeSnippet>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"getDerivedStateFromProps()\" />\r\n              <Content>\r\n                getDerivedStateFromProps is invoked right before calling the\r\n                render method, both on the initial mount and on subsequent\r\n                updates i.e. right before rendering the element(s) in the DOM..\r\n                It returns an object to update the state, or null to update\r\n                nothing. This method is used where the state depends on changes\r\n                in props over time.\r\n              </Content>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"render()\" />\r\n              <Content>\r\n                The render() method is the only required method in a class\r\n                component. This is the method that actually outputs the HTML to\r\n                the DOM. The render() function should be pure, meaning that it\r\n                does not modify component state, it returns the same result each\r\n                time it’s invoked, and it does not directly interact with the\r\n                browser.\r\n              </Content>\r\n              <CodeSnippet>\r\n                {\"render() {\"}\r\n                <br />\r\n                <TabSpace />\r\n                {\"return (<div>I love Heapify ReactAble!!</div>)\"}\r\n                <br />\r\n                {\"}\"}\r\n              </CodeSnippet>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"componentDidMount()\" />\r\n              <Content>\r\n                componentDidMount() is invoked immediately after a component is\r\n                mounted (inserted into the tree). Initialization that requires\r\n                DOM nodes should go here. If we need to load data from a remote\r\n                endpoint, this is a good place to instantiate the network\r\n                request i.e. make any API calls.\r\n              </Content>\r\n              <CodeSnippet>\r\n                {\"componentDidMount() { // perform the tasks here. }\"}\r\n              </CodeSnippet>\r\n              <Content>\r\n                We may call setState() immediately in componentDidMount(). It\r\n                will trigger an extra rendering, but it will happen before the\r\n                browser updates the screen. This guarantees that even though the\r\n                render() will be called twice in this case, the user won’t see\r\n                the intermediate state. Use this pattern with caution because it\r\n                often causes performance issues. In most cases, we should be\r\n                able to assign the initial state in the constructor() instead.\r\n              </Content>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"shouldComponentUpdate()\" />\r\n              <Content>\r\n                In the shouldComponentUpdate() method we can return a Boolean\r\n                value that specifies whether React should continue with the\r\n                rendering or not. It’s default value is true.\r\n              </Content>\r\n              <Content>\r\n                Whenever we make any changes in the state of the component, then\r\n                by default the component is re-rendered. Using\r\n                shouldComponentUpdate() we can handle this behaviour. It\r\n                receives next state and next props as the arguments and checks\r\n                them with the current state and the current props. If any\r\n                changes are found, then it re-renders the component otherwise\r\n                not. By adding some if-else conditions we can manipulate this\r\n                behaviour and increase the performance of our application.\r\n              </Content>\r\n              <Content>\r\n                <strong>Note: </strong>This method only exists as a performance\r\n                optimization.\r\n              </Content>\r\n              <CodeSnippet>\r\n                {\"shouldComponentUpdate(nextProps, nextState) {\"}\r\n                <br />\r\n                <TabSpace />\r\n                {\"\tif(nextState.count === this.state.count) return false;\"}\r\n                <br />\r\n                <TabSpace />\r\n                {\"\telse return true;\"}\r\n                <br />\r\n                {\"}\"}\r\n              </CodeSnippet>\r\n              <Content>\r\n                In the above example, we are comparing the value of the count\r\n                state variable. So, if the values are the same, then we’ll\r\n                return false which will not re-render the component but if the\r\n                values are not the same i.e. changes have been made, then we’ll\r\n                return true which will re-render the component.\r\n              </Content>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"getSnapshotBeforeUpdate()\" />\r\n              <Content>\r\n                getSnapshotBeforeUpdate() is invoked right before the most\r\n                recently rendered output is committed to the DOM. It enables our\r\n                component to capture some information from the DOM before it is\r\n                potentially changed. In simple words, inside the\r\n                getSnapshotBeforeUpdate() method we have access to the props and\r\n                state before the update, meaning that even after the update, we\r\n                can check what the values were before the update.\r\n              </Content>\r\n              <CodeSnippet>\r\n                getSnapshotBeforeUpdate(prevProps, prevState) {\"{}\"}\r\n              </CodeSnippet>\r\n              <Content>\r\n                Any value returned by this lifecycle method will be passed as a\r\n                parameter to componentDidUpdate(). So if the\r\n                getSnapshotBeforeUpdate() method is present, we should also\r\n                include the componentDidUpdate() method, otherwise we’ll get an\r\n                error.\r\n              </Content>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"componentDidUpdate()\" />\r\n              <Content>\r\n                componentDidUpdate() is invoked immediately after updating\r\n                occurs. As this method is called once updates are done, so it is\r\n                not called for the initial render. We may call setState()\r\n                immediately in componentDidUpdate() but it must be wrapped in a\r\n                condition, or it will cause an infinite loop. It would also\r\n                cause an extra re-rendering which, while not visible to the\r\n                user, can affect the component performance.\r\n              </Content>\r\n              <CodeSnippet>\r\n                componentDidUpdate(prevProps, prevState, snapshot) {\"{}\"}\r\n              </CodeSnippet>\r\n              <Content>\r\n                If the component implements the getSnapshotBeforeUpdate()\r\n                lifecycle, the value it returns will be passed as a third\r\n                snapshot parameter to componentDidUpdate(). Otherwise this\r\n                parameter will be undefined.\r\n              </Content>\r\n              <Content>\r\n                <strong>Note: </strong>componentDidUpdate() will not be invoked\r\n                if shouldComponentUpdate() returns false.\r\n              </Content>\r\n            </li>\r\n            <li>\r\n              <SubHeading title=\"componentWillUnmount()\" />\r\n              <Content>\r\n                The componentWillUnmount method is called when the component is\r\n                about to be removed from the DOM. We should not call setState()\r\n                in componentWillUnmount() because the component will never be\r\n                re-rendered and so making the state changes will not have any\r\n                effect.\r\n              </Content>\r\n              <CodeSnippet>componentWillUnmount() {\"{}\"}</CodeSnippet>\r\n            </li>\r\n          </ul>\r\n          <strong>Note</strong>: More information and questions on LIfecycle\r\n          methods, refer:{\" \"}\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            href=\"https://youtu.be/7C4R8Oexsfg\"\r\n          >\r\n            Lifecycle Methods\r\n          </a>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LifecycleMethods;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\n\r\nconst Hooks = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>React Hooks</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li>\r\n            <Heading title=\"What are hooks?\" />\r\n            <Content>\r\n              Hooks are the new feature introduced in the React 16.8 version.\r\n              They allow us to use state and other React features without\r\n              writing a class. Hooks are the functions which hook into React\r\n              state and lifecycle features from function components. They don’t\r\n              work inside a class component. Hooks are similar to JavaScript\r\n              functions, but we need to follow two rules when using them. Hooks\r\n              rule ensures that all the stateful logic in a component is visible\r\n              in its source code.\r\n              <br />\r\n              These rules are:\r\n            </Content>\r\n            <ul style={{ listStyleType: \"disc\" }}>\r\n              <li>\r\n                Only call Hooks at the top level. Do not call Hooks inside\r\n                loops, conditions, or nested functions. Hooks should always be\r\n                used at the top level of the React functions. This rule ensures\r\n                that Hooks are called in the same order each time a component\r\n                renders.\r\n              </li>\r\n              <li>\r\n                Only call Hooks from React functional components. We cannot call\r\n                Hooks from regular JavaScript functions. Instead, we can call\r\n                Hooks from React function components. Hooks can also be called\r\n                from custom Hooks.\r\n              </li>\r\n            </ul>\r\n            <br />\r\n            The most commonly used hooks in React are-\r\n            <ul style={{ listStyleType: \"disc\" }}>\r\n              <li>useState</li>\r\n              <li>useEffect</li>\r\n              <li>useRef</li>\r\n              <li>useCallback</li>\r\n              <li>useMemo</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"useState Hook\" />\r\n            <Content>\r\n              The useState() is a Hook that allows us to have state variables in\r\n              functional components. The useState hook is a special function\r\n              that takes the initial state as an argument and returns an array\r\n              of two entries. The first element is the initial variable and the\r\n              second one is a function that is used for updating the state.\r\n            </Content>\r\n            <CodeSnippet>const [count, setCount] = useState(0);</CodeSnippet>\r\n            <Content>\r\n              In order to update the state, we can directly pass the updated\r\n              value in the function.\r\n            </Content>\r\n            <CodeSnippet>setCount(count + 1);</CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"useEffect Hook\" />\r\n            <Content>\r\n              The Effect Hook lets us perform side effects in functional\r\n              components. It could be treated as a combination of\r\n              componentDidMount(), componentDidUpdate() and\r\n              componentWillUnmount(). Data fetching or manually changing the DOM\r\n              in React components are both examples of side effects.\r\n              <br />\r\n              useEffect() hook accepts 2 arguments:\r\n              <ul>\r\n                <li>\r\n                  callback is the function containing the side-effect logic.\r\n                  callback is executed right after changes are pushed to DOM.\r\n                </li>\r\n                <li>\r\n                  dependencies is an optional array of dependencies. useEffect()\r\n                  executes callback only if the dependencies have changed\r\n                  between renderings.\r\n                </li>\r\n              </ul>\r\n            </Content>\r\n            <CodeSnippet>useEffect(callback[, dependencies]);</CodeSnippet>\r\n            <Content>\r\n              Put the entire side-effect logic into the callback function, then\r\n              use the dependencies argument to control when the side-effect\r\n              runs. That’s the sole purpose of useEffect().\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"useEffect(() => {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"console.log(count);\"}\r\n              <br />\r\n              {\"}, [count]);\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              As useEffect is a combination of various Lifecycle methods, so it\r\n              could be used to perform the work of various Lifecycle methods.\r\n            </Content>\r\n            <ul>\r\n              <li>\r\n                <strong>useEffect as componentDidMount</strong>\r\n                <Content>\r\n                  If we provide an array of dependency, then useEffect will act\r\n                  as componentDidMount and will be called only once, when the\r\n                  component is initialized.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\r\n                    \"function MyComponent() {useEffect(() => { // Runs after every rendering}, []);  }\"\r\n                  }\r\n                </CodeSnippet>\r\n              </li>\r\n              <li>\r\n                <strong>useEffect as componentDidUpdate</strong>\r\n                <Content>\r\n                  If we don’t pass an array of dependency, then it will behave\r\n                  like componentDIdUpdate and will be called after each render\r\n                  including the initial render.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\r\n                    \"function MyComponent() {useEffect(() => {// Runs after Every rendering});  }\"\r\n                  }\r\n                </CodeSnippet>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"useRef Hook\" />\r\n            <Content>\r\n              The useRef is a hook that allows us to directly create a reference\r\n              to the DOM element in the functional component.The value is\r\n              persisted in the refContainer.current property. These values are\r\n              accessed from the current property of the returned object. The\r\n              current property could be initialised to the passed argument\r\n              initialValue e.g. useRef(initialValue). The object can persist a\r\n              value for a full lifetime of the component.\r\n            </Content>\r\n            <SubHeading title=\"Using the useRef Hook\" />\r\n            <Content>\r\n              The first step of working with refs is the initialization. We do\r\n              this by calling React's useRef function, passing as the only\r\n              argument the initial value we want our reference to have.\r\n            </Content>\r\n            <CodeSnippet>\r\n              const reference = useRef('initial value');\r\n            </CodeSnippet>\r\n            <Content>\r\n              The function returns an object with current property.\r\n            </Content>\r\n            <CodeSnippet>{\"{current: 'initial value',}\"}</CodeSnippet>\r\n            <Content>\r\n              Any change that we make to the reference object will persist\r\n              across all renders of our React component. useRef hook is almost\r\n              similar to useState hook, but a major difference in both of these\r\n              is that useState hook triggers a re-render() as soon as the state\r\n              is updated but useRef hook updates the value and also doesn’t\r\n              trigger a re-render(). A very common use case of useRef hook is if\r\n              we have to maintain the count of the number of times a button is\r\n              clicked. If we use useState for this, then each time the count is\r\n              updated, it will trigger an unnecessary render but using useRef\r\n              hook will serve our purpose and won’t trigger any re-render as\r\n              well.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const App = () => {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const inputRef = useRef(null);\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"return(\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<input ref={inputRef}value={name}onChange={handleChange}/>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\r\n                \"<button onClick={() => inputRef.current.focus()}>Focus</button>\"\r\n              }\r\n              <br />\r\n              <TabSpace />\r\n              {\"</>);\"}\r\n              <br />\r\n              {\"};\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              The above example creates a reference to the input field and then\r\n              uses that reference to focus on that input field on click of the\r\n              button. We could also use the .current property of the reference\r\n              to get the value of the input field.\r\n              <br />\r\n              Some common uses of refs in React are:\r\n              <ul>\r\n                <li>Storing the previous state.</li>\r\n                <li>Creating reference to any DOM element.</li>\r\n              </ul>\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"useCallback Hook\" />\r\n            <Content>\r\n              <strong>\r\n                <i>\r\n                  In Computer Science, memoization is a concept used in general\r\n                  when we don't need to recompute the function with a given\r\n                  argument for the next time as it returns the cached result.\r\n                </i>\r\n              </strong>\r\n              <br />\r\n              The useCallback hook is used when we have a component in which the\r\n              child is rerendering again and again without need. Pass an inline\r\n              callback and an array of dependencies. useCallback will return a\r\n              memoized version of the callback that only changes if one of the\r\n              dependencies has changed.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const App = () => {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const [count, setCount] = useState(0);\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const [number, setNumber] = useState(0);\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const incrementCounter = () => {setCount(count + 1)};\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const decrementCounter = () => {setCount(count - 1)};\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const incrementNumber = () => {setNumber(number + 1)};\"}\r\n              <br />\r\n              <br />\r\n              <TabSpace />\r\n              {\"return (\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<div>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"Count: {count}\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<button onClick={incrementCounter}>Increase counter</button>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<button onClick={decrementCounter}>Decrease Counter</button>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<button onClick={incrementNumber}>increase number</button>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"</div>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\")\"}\r\n              <br />\r\n              {\"}\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              In the above example, we have two counters, count and number. And\r\n              we have 3 functions to increment/decrement these counters. Now if\r\n              we increment the count variable, then as soon as the count is\r\n              updated a re-render will be triggered and because of which\r\n              incrementNumber function will also be initialised again. But if we\r\n              take a deeper look, then this function doesn’t depend on the count\r\n              variable, so there was no need to initialise it again. And same\r\n              goes the case for number variables, if we update the number using\r\n              incrementNumber, then incrementCounter and decrementCounter will\r\n              be initialised again but as they don’t depend on the number, so\r\n              this initialisation is unnecessary.\r\n            </Content>\r\n            <Content>\r\n              so this initialisation is unnecessary. So to prevent this\r\n              unnecessary initialisation of functions, we use useCallback hook.\r\n              It memorizes the entire function passed in as a callback function.\r\n              We also pass a dependency array to the hook. If the values in the\r\n              dependency array change, then only the callback function will\r\n              initialise again otherwise the previously memorised value will be\r\n              used. This prevents the unnecessary initialisations of the\r\n              functions. So the above functional component could be optimized\r\n              using useCallback hook as:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const incrementCounter = useCallback(() => { \"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"setCount(count + 1)\"}\r\n              <br />\r\n              {\"}, [count]);\"}\r\n              <br />\r\n              {\"const decrementCounter = useCallback(() => {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"setCount(count - 1)\"}\r\n              <br />\r\n              {\"}, [count])'\"}\r\n              <br />\r\n              {\"const incrementNumber = useCallback(() => {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"setNumber(number + 1)\"}\r\n              <br />\r\n              {\"}, [number]);\"}\r\n            </CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"useMemo Hook\" />\r\n            <Content>\r\n              The useMemo is a hook used in the functional component of react\r\n              that returns a memoized value.\r\n              <br />\r\n              useMemo hook is similar to useCallback hook, but the main\r\n              difference is that\r\n              <strong>\r\n                <i>\r\n                  {\" \"}\r\n                  useCallback memorises the entire function whereas useMemo\r\n                  memorises the value returned by that function.\r\n                </i>\r\n              </strong>\r\n            </Content>\r\n            <Content>\r\n              Pass a function and an array of dependencies. useMemo will only\r\n              recompute the memoized value when one of the dependencies has\r\n              changed. This optimization helps to avoid expensive calculations\r\n              on every render. If no array is provided, a new value will be\r\n              computed on every render.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const memoizedValue = useMemo(() => function(), []);\"}\r\n            </CodeSnippet>\r\n          </li>\r\n          <strong>Note</strong>: For more reference of React Hooks, refer:{\" \"}\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            href=\"https://youtu.be/uUda1nI8Jp0\"\r\n          >\r\n            React Hooks\r\n          </a>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hooks;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst NpmArrayMethods = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Array Methods</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li>\r\n            <Heading title=\"What are npm packages?\" />\r\n            <Content>\r\n              Node Package Manager (NPM) is a command line tool that installs,\r\n              updates or uninstalls Node. js packages in your application. It is\r\n              also an online repository for open-source Nodejs packages. The\r\n              node community around the world creates useful modules and\r\n              publishes them as packages in this repository. You can checkout\r\n              various packages at:&nbsp;\r\n              <a href=\"https://www.npmjs.com/\" rel=\"noreferrer\" target=\"_blank\">\r\n                npm\r\n              </a>\r\n              <br />\r\n              To install any package locally, we could use the following command\r\n            </Content>\r\n            <CodeSnippet>{\"npm install <package name>\"}</CodeSnippet>\r\n            <Content>\r\n              This will add the package into our project and add all it’s\r\n              modules in the node_modules folder and will also list the package\r\n              along with it’s version in the package.json file.\r\n            </Content>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Map & Filter methods\" />\r\n            <Content>\r\n              Map and filter both are array methods in JavaScript. Each one will\r\n              iterate over an array and perform a transformation or computation.\r\n              Each will return a new array based on the result of the function.\r\n            </Content>\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"Map\" />\r\n                <Content>\r\n                  The map() method is used for creating a new array from an\r\n                  existing one, applying a function to each one of the elements\r\n                  of the first array.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"const numbers = [1, 2, 3, 4];\"}\r\n                  <br />\r\n                  {\"const doubled = numbers.map((item, index) => item * 2);\"}\r\n                  <br />\r\n                  {\"console.log(doubled);} // [2, 4, 6, 8]\"}\r\n                  <br />\r\n                </CodeSnippet>\r\n                <Content>\r\n                  In the above example, each number in an array is doubled. As\r\n                  the map function returns an array, the new array contains the\r\n                  updated values. JSX allows embedding any expression in curly\r\n                  braces so we could inline the map() result.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"function NumberList(props) {\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"const numbers = props.numbers;\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"return (\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"<ul>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\r\n                    \"{ numbers.map((number) => <li key={number.toString()} value={number}>{value}</li>) }\"\r\n                  }\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"</ul>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\");\"}\r\n                  <br />\r\n                  {\"}\"}\r\n                </CodeSnippet>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Filter\" />\r\n                <Content>\r\n                  The filter() method takes each element in an array and it\r\n                  applies a conditional statement against it. If this\r\n                  conditional returns true, the element gets pushed to the\r\n                  output array. If the condition returns false, the element does\r\n                  not get pushed to the output array.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"const numbers = [1, 2, 3, 4];\"}\r\n                  <br />\r\n                  {\r\n                    \"const evenNumbers = numbers.filter((item, index) => item % 2 === 0);\"\r\n                  }\r\n                  <br />\r\n                  {\"console.log(evenNumbers); // [2, 4]\"}\r\n                  <br />\r\n                </CodeSnippet>\r\n                <Content>\r\n                  In the above example, odd numbers are filtered out, leaving\r\n                  only even numbers.\r\n                </Content>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Lists & Keys\" />\r\n            <Content>\r\n              We can build collections of elements and include them in JSX using\r\n              curly braces {\"{}\"}.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const numbers = [1, 2, 3, 4, 5];\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"const listItems = numbers.map((number) => <li>{number}</li>\"}\r\n              <br />\r\n              {\");\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              We then include the entire listItems array inside a {\"<ul>\"}{\" \"}\r\n              element, and render it to the DOM:\r\n            </Content>\r\n            <CodeSnippet>{\"<ul>{listItems}</ul>\"}</CodeSnippet>\r\n            <Content>\r\n              When we run this code, we’ll be given a warning that a key should\r\n              be provided for list items. A key is a special string attribute\r\n              that we need to include when creating lists of elements. Keys help\r\n              React identify which items have changed, are added, or are\r\n              removed. Keys should be given to the elements inside the array to\r\n              give the elements a stable identity. The best way to pick a key is\r\n              to use a string that uniquely identifies a list item among its\r\n              siblings. Most often we would use IDs from your data as keys but\r\n              when we don’t have stable IDs for rendered items, we may use the\r\n              item index as a key as a last resort:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"const todoItems = todos.map((todo, index) =>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"<li key={index}>\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"{todo.text}\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"</li>\"}\r\n              <br />\r\n              {\");\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              <strong>Note: </strong>\r\n              This package could be used to display animated loaders &nbsp;\r\n              <a\r\n                href=\"https://www.npmjs.com/package/react-animated-loader\"\r\n                rel=\"noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                react-animated-loader\r\n              </a>\r\n            </Content>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NpmArrayMethods;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst EventHandling = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Event Handling</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li>\r\n            <Heading title=\"Events\" />\r\n            <Content>\r\n              An event is an action that could be triggered as a result of the\r\n              user action or a system-generated event. Handling events with\r\n              React elements is very similar to handling events on DOM elements.\r\n              We only need to keep two things in mind:\r\n              <ul>\r\n                <li>React events are named using camelCase.</li>\r\n                <li>\r\n                  With JSX we pass a function as the event handler, rather than\r\n                  a string.\r\n                </li>\r\n              </ul>\r\n              We create a method in the component and then pass that method to\r\n              the event handler.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"<button onClick={shoot}>Take the Shot!</button>\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              In class components, this keyword is not defined by default, so\r\n              with regular functions this keyword represents the object that\r\n              called the method, which can be the global window object, a HTML\r\n              button, or anything else. So, if we have to use regular functions\r\n              instead of arrow functions then we have to bind this to the\r\n              component instance using the bind() method:\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"class Football extends React.Component {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"constructor(props) {\"}\r\n              <br />\r\n              <TabSpace />\r\n              <TabSpace />\r\n              {\"super(props);\"}\r\n              <br />\r\n              <TabSpace />\r\n              <TabSpace />\r\n              {\"this.shoot = this.shoot.bind(this);\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"}\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"shoot() { alert(this); }\"}\r\n              <br />\r\n              <br />\r\n              <TabSpace />\r\n              {\"render() {\"}\r\n              <br />\r\n              <TabSpace />\r\n              <TabSpace />\r\n              {\r\n                \"return ( <button onClick={this.shoot}>Take the shot!</button> ); \"\r\n              }\r\n              <br />\r\n              <TabSpace />\r\n              {\"}\"}\r\n              <br />\r\n              {\"}\"}\r\n            </CodeSnippet>\r\n            <Content>\r\n              So a better way is to use arrow functions instead of using the\r\n              older JavaScript functions. With arrow functions, this will always\r\n              represent the object that defined the arrow function. In simple\r\n              words, binding with this keyword is not required if we are using\r\n              arrow functions.\r\n            </Content>\r\n            <CodeSnippet>\r\n              {\"class Football extends React.Component {\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"shoot = () => { alert(this); }\"}\r\n              <br />\r\n              <TabSpace />\r\n              {\"render() {\"}\r\n              <br />\r\n              <TabSpace />\r\n              <TabSpace />\r\n              {\r\n                \"return ( <button onClick={this.shoot}>Take the shot!</button> );\"\r\n              }\r\n              <br />\r\n              <TabSpace />\r\n              {\"}\"}\r\n              <br />\r\n              {\"}\"}\r\n            </CodeSnippet>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Synthetic Events\" />\r\n            <Content>\r\n              React has its own event handling system which is known as\r\n              Synthetic Events. The synthetic event is a cross-browser wrapper\r\n              of the browser's native event. Every React event is an instance of\r\n              the Synthetic Event. React reuses the event objects, by pooling\r\n              them, which results in performance gains.\r\n              <br />\r\n              Some of the very common events present in React are:\r\n            </Content>\r\n            <ul>\r\n              <li>onKeyDown</li>\r\n              <li>onKeyPress</li>\r\n              <li>onKeyUp</li>\r\n              <li>onFocus</li>\r\n              <li>onChange</li>\r\n              <li>onInput</li>\r\n              <li>onSubmit</li>\r\n              <li>onScroll</li>\r\n              <li>onLoad</li>\r\n              <li>onToggle</li>\r\n            </ul>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventHandling;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst ConextAPI = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>Context API</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What is Context API\" />\r\n            <Content>\r\n              In a typical React application, data is passed top-down (parent to\r\n              child) via props, but such usage can be cumbersome for certain\r\n              types of props (e.g. locale preference, UI theme) that are\r\n              required by many components within an application. Context\r\n              provides a way to share values like these between components\r\n              without having to explicitly pass a prop through every level of\r\n              the tree. Context is designed to share data that can be considered\r\n              “global” for a tree of React components, such as the current\r\n              authenticated user, theme, or preferred language. <br />\r\n              The Context API can be used to share data with multiple\r\n              components, without having to pass data through props manually.\r\n            </Content>\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"createContext\" />\r\n                <Content>\r\n                  To start with the Context API, the first thing we need to do\r\n                  is create a context using the createContext function from\r\n                  React.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  const NotesContext = createContext([]);\r\n                </CodeSnippet>\r\n                <Content>\r\n                  The createContext function accepts an initial value, but this\r\n                  initial value is not required. After creating the context,\r\n                  this context now has two React components that are going to be\r\n                  used: Provider and Consumer.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Provider\" />\r\n                <Content>\r\n                  The Provider component is going to be used to wrap the\r\n                  components that are going to have access to our context. The\r\n                  Provider component receives a prop called value, which can be\r\n                  accessed from all the components that are wrapped inside\r\n                  Provider, and it will be responsible to grant access to the\r\n                  context data.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"<NotesContext.Provider value={this.state.notes}>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"// the context goes here\"}\r\n                  <br />\r\n                  {\"</Notes.Provider> \"}\r\n                </CodeSnippet>\r\n                <Content>\r\n                  All consumers that are descendants of a Provider will\r\n                  re-render whenever the Provider’s value prop changes. The\r\n                  propagation from Provider to its descendant consumers is not\r\n                  subject to the shouldComponentUpdate method, so the consumer\r\n                  is updated even when an ancestor component skips an update.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Consumer\" />\r\n                <Content>\r\n                  After we wrap all the components that are going to need access\r\n                  to the context with the Provider component, we need to tell\r\n                  which component is going to consume that data. The Consumer\r\n                  component allows a React component to subscribe to the context\r\n                  changes. The component makes the data available using a render\r\n                  prop.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"<NotesContext.Consumer>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"{values => <h1>{value</h1>}\"}\r\n                  <br />\r\n                  {\"</Notes.Consumer>\"}\r\n                </CodeSnippet>\r\n                <Content>\r\n                  Consumer require a function as a child. The function receives\r\n                  the current context value and returns a React node. The value\r\n                  argument passed to the function will be equal to the value\r\n                  prop of the closest Provider for this context above in the\r\n                  tree.\r\n                </Content>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConextAPI;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\nimport TabSpace from \"../../Components/TabSpace\";\r\n\r\nconst ReactRouter = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>React Router</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What is React Router?\" />\r\n            <Content>\r\n              React Router is a standard library for routing in React. It\r\n              enables the navigation among views of various components in a\r\n              React Application, allows changing the browser URL, and keeps the\r\n              UI in sync with the URL.\r\n            </Content>\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"Installtion\" />\r\n                <Content>\r\n                  We can install React Router from the public npm registry with\r\n                  either npm or yarn. Since we’ll be focused towards building a\r\n                  web app, we’ll use react-router-dom.\r\n                </Content>\r\n                <CodeSnippet>npm install react-router-dom</CodeSnippet>\r\n                <Content>\r\n                  Run the above command inside the project and it will install\r\n                  react-router-dom in our project. <br />\r\n                  There are three primary categories of components in React\r\n                  Router:\r\n                </Content>\r\n                <ul style={{ listStyleType: \"circle\" }}>\r\n                  <li>{\"routers, like <BrowserRouter> and <HashRouter>\"}</li>\r\n                  <li>{\"route matchers, like <Route> and <Switch>\"}</li>\r\n                  <li>\r\n                    {\"and navigation, like <Link>, <NavLink>, and <Redirect>\"}\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Routers\" />\r\n                <Content>\r\n                  At the core of every React Router application should be a\r\n                  router component. For web projects, react-router-dom provides{\" \"}\r\n                  {\"<BrowserRouter> and <HashRouter>\"} routers. The main\r\n                  difference between the two is the way they store the URL and\r\n                  communicate with the web server.\r\n                </Content>\r\n                <ul>\r\n                  <li>\r\n                    A {\"<BrowserRouter>\"} uses regular URL paths. These are\r\n                    generally the best-looking URLs, but they require your\r\n                    server to be configured correctly. Specifically, the web\r\n                    server needs to serve the same page at all URLs that are\r\n                    managed client-side by React Router.\r\n                  </li>\r\n                  <li>\r\n                    A {\"<HashRouter>\"} stores the current location in the hash\r\n                    portion of the URL, so the URL looks something like{\" \"}\r\n                    <strong>http://example.com/#/your/page.</strong> Since the\r\n                    hash is never sent to the server, this means that no special\r\n                    server configuration is needed.\r\n                  </li>\r\n                </ul>\r\n                <Content>\r\n                  To use a router, we only need to make sure that it is rendered\r\n                  at the root of the element hierarchy. Typically it must wrap\r\n                  our top-level {\"<App>\"} element in a router.\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"ReactDOM.render(\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"<BrowserRouter>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<App />\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"</BrowserRouter>,\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"document.getElementById('root')\"}\r\n                  <br />\r\n                  {\");\"}\r\n                </CodeSnippet>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Route Matchers\" />\r\n                <Content>\r\n                  {\r\n                    \"There are two route matching components: Switch and Route. When a <Switch> is rendered, it searches through its children <Route> elements to find one whose path matches the current URL. When it finds one, it renders that <Route> and ignores all others. This means that we should put <Route>(s) with more specific paths before less-specific ones.\"\r\n                  }\r\n                </Content>\r\n                <Content>\r\n                  {\r\n                    \"One important thing to note is that a <Route path> matches the beginning of the URL, not the whole thing. So a <Route path='/'> will always match the URL. Because of this, we typically put this <Route> last in our <Switch>. Another possible solution is to use <Route exact path='/'> which does match the entire URL.\"\r\n                  }\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"function App() {\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"return (\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"<div>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<Switch>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<Route path='/about'>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<About />\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"</Route>\"}\r\n                  <br />\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n\r\n                  {\r\n                    \"<Route path='/contact/:id'> // more specific route is before\"\r\n                  }\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<Contact />\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"</Route>\"}\r\n                  <br />\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n\r\n                  {\"<Route path='/contact'>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<AllContacts />\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"</Route>\"}\r\n                  <br />\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n\r\n                  {\"<Route path='/'> // acts as fallback\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"<Home />\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  <TabSpace />\r\n                  {\"</Route>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"</Switch>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"</div>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\");\"}\r\n                  <br />\r\n                  {\"}\"}\r\n                </CodeSnippet>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Route Changers\" />\r\n                <Content>\r\n                  {\r\n                    \"React Router provides a <Link> component to create links in our application. Wherever we render a <Link>, an anchor (<a>) will be rendered in our HTML document.\"\r\n                  }\r\n                </Content>\r\n                <CodeSnippet>{\"<Link to='/'>Home</Link>\"}</CodeSnippet>\r\n                <Content>\r\n                  {\r\n                    \"The <NavLink> is a special type of <Link> that can style itself as “active” when its to prop matches the current location.\"\r\n                  }\r\n                </Content>\r\n                <CodeSnippet>\r\n                  {\"<NavLink to='/react' activeClassName='hurray'>\"}\r\n                  <br />\r\n                  <TabSpace />\r\n                  {\"React\"}\r\n                  <br />\r\n                  {\"</NavLink>\"}\r\n                </CodeSnippet>\r\n                <Content>\r\n                  {\r\n                    \"Any time that we want to force navigation, we can render a <Redirect>. When a <Redirect> renders, it will navigate using its to prop.\"\r\n                  }\r\n                </Content>\r\n                <CodeSnippet>{\"<Redirect to='/login' />\"}</CodeSnippet>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactRouter;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport PageHeading from \"../../Components/PageHeading\";\r\nimport Footer from \"../../Components/Footer\";\r\nimport { Container, Table } from \"react-bootstrap\";\r\nimport Content from \"../../Components/Content\";\r\nimport Heading from \"../../Components/Heading\";\r\nimport CodeSnippet from \"../../Components/CodeSnippet\";\r\nimport SubHeading from \"../../Components/SubHeading\";\r\n\r\nconst API = () => {\r\n  return (\r\n    <div>\r\n      <PageHeading>React Router</PageHeading>\r\n      <Container className=\"pageSection\">\r\n        <ol>\r\n          <li className=\"listItem\">\r\n            <Heading title=\"What are APIs?\" />\r\n            <Content>\r\n              API stands for <strong>Application Programming Interface</strong>{\" \"}\r\n              It is a software that allows two applications to talk to each\r\n              other. When we use an application on our mobile phone, the\r\n              application connects to the Internet and sends data to a server.\r\n              The server then retrieves that data, interprets it, performs the\r\n              necessary actions and sends it back to your phone. The application\r\n              then interprets that data and presents us with the information we\r\n              wanted in a readable way. This is what an API is - all of this\r\n              happens via API.\r\n            </Content>\r\n            <SubHeading title=\"Working of an API\" />\r\n            <ul>\r\n              <li>\r\n                A client application initiates an API call to retrieve\r\n                information, also known as a request. This request is processed\r\n                from an application to the web server via the API’s Uniform\r\n                Resource Identifier (URI) and includes a request verb, headers,\r\n                and sometimes, a request body.\r\n              </li>\r\n              <li>\r\n                After receiving a valid request, the API makes a call to the\r\n                external program or web server.\r\n              </li>\r\n              <li>\r\n                The server sends a response to the API with the requested\r\n                information.\r\n              </li>\r\n              <li>\r\n                The API transfers the data to the initial requesting\r\n                application.\r\n              </li>\r\n            </ul>\r\n            <br />\r\n            Some of the very common and easy to use APIs are:\r\n            <ul>\r\n              <li>\r\n                Dummy data for testing:{\" \"}\r\n                <a\r\n                  href=\"https://jsonplaceholder.typicode.com/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  Dummy data\r\n                </a>\r\n              </li>\r\n              <li>\r\n                Weather API:{\" \"}\r\n                <a\r\n                  href=\"https://openweathermap.org/api\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  Weather API\r\n                </a>\r\n              </li>\r\n              <li>\r\n                Movie API:{\" \"}\r\n                <a\r\n                  href=\"https://developers.themoviedb.org\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  Movie API\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Fetch & Axios\" />\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"Fetch\" />\r\n                <Content>\r\n                  The fetch() method in JavaScript is used to request the server\r\n                  and load the information in the webpages. The request can be\r\n                  of any APIs that returns the data of the format JSON or XML.\r\n                  This method returns a promise.\r\n                </Content>\r\n                <CodeSnippet>fetch( url, options )</CodeSnippet>\r\n                <Content>This method accept two parameters</Content>\r\n                <ul style={{ listStyleType: \"circle\" }}>\r\n                  <li>\r\n                    <strong>URL:</strong> It is the URL to which the request is\r\n                    to be made.\r\n                  </li>\r\n                  <li>\r\n                    <strong>Options:</strong> It is an array of properties. It\r\n                    is an optional parameter. Options will include the headers,\r\n                    request method, body etc.\r\n                  </li>\r\n                </ul>\r\n                <br />\r\n                <Content>\r\n                  Fetch is available to all JavaScript libraries and packages.\r\n                  So we don’t have to install it manually in our React\r\n                  application. We can directly use it without importing as well.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Axios\" />\r\n                <Content>\r\n                  Axios is an HTTP client library that allows us to make\r\n                  requests to a given endpoint. It works similar to fetch, but\r\n                  with some extra added benefits.\r\n                </Content>\r\n                <ul style={{ listStyleType: \"circle\" }}>\r\n                  <li>\r\n                    It has good defaults to work with JSON data. Unlike Fetch\r\n                    API, we often don't need to set our headers. Or perform\r\n                    tedious tasks like converting our request body to a JSON\r\n                    string.\r\n                  </li>\r\n                  <li>\r\n                    Axios has function names that match any HTTP methods. To\r\n                    perform a GET request, we use the .get() method and\r\n                    similarly for post, delete etc.\r\n                  </li>\r\n                  <li>\r\n                    Axios does more with less code. Unlike the Fetch API, we\r\n                    only need one {\".then()\"} callback to access our requested\r\n                    JSON data.\r\n                  </li>\r\n                </ul>\r\n                <br />\r\n                <Content>\r\n                  Axios is available as an npm package. So, we could simply\r\n                  install it in out project using the command:\r\n                </Content>\r\n                <CodeSnippet>npm install axios</CodeSnippet>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Various HTTP methods for an API\" />\r\n            <Content>\r\n              REST APIs enable us to develop any kind of web application having\r\n              all possible CRUD (create, read, update, delete) operations. REST\r\n              guidelines suggest using a specific HTTP method on a particular\r\n              type of call made to the server. Here are some of the most common\r\n              HTTP methods.\r\n            </Content>\r\n            <ul>\r\n              <li>GET</li>\r\n              <li>POST</li>\r\n              <li>PATCH</li>\r\n              <li>PUT</li>\r\n              <li>DELETE</li>\r\n            </ul>\r\n            <br />\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"GET\" />\r\n                GET requests are the most common and widely used methods in APIs\r\n                and websites. The GET method is used to retrieve data from a\r\n                server at the specified resource. For example, say we have an\r\n                API with a /users endpoint. Making a GET request to that\r\n                endpoint would return a list of all available users.\r\n              </li>\r\n              <br />\r\n              <li>\r\n                <SubHeading title=\"POST\" />\r\n                In web services, POST requests are used to send data to the API\r\n                server to create a resource. The data sent to the server is\r\n                stored in the request body of the HTTP request. The simplest\r\n                example is a contact form on a website. When we fill out the\r\n                inputs in a form and hit Send, that data is put in the response\r\n                body of the request and sent to the server.\r\n              </li>\r\n              <br />\r\n              <li>\r\n                <SubHeading title=\"PATCH\" />A PATCH request is one of the\r\n                lesser-known HTTP methods, but it is similar to POST and PUT.\r\n                This HTTP method is used when we have to make any updates to the\r\n                data. The difference with PATCH is that we only apply partial\r\n                modifications to the resource. The difference between PATCH and\r\n                PUT, is that a PATCH request is non-idempotent i.e. each time\r\n                when the same request is made, the return status of the API will\r\n                be different.\r\n              </li>\r\n              <br />\r\n              <li>\r\n                <SubHeading title=\"PUT\" />\r\n                Similar to POST, PUT requests are used to send data to the API\r\n                to update or create a resource. The difference is that PUT\r\n                requests are idempotent i.e. calling the same PUT request\r\n                multiple times will always produce the same result. In contrast,\r\n                calling a POST/PATCH request repeatedly may have side effects of\r\n                creating the same resource multiple times and might return\r\n                different results each time.\r\n              </li>\r\n              <br />\r\n              <li>\r\n                <SubHeading title=\"DELETE\" />\r\n                The DELETE method is exactly as it sounds: delete the resource\r\n                at the specified URL. This method is one of the more common in\r\n                RESTful APIs so it's good to know how it works.\r\n                <br />\r\n                {\r\n                  \"For ex: If a new user is created with a POST request to /users, and it can be retrieved with a GET request to /users/{{userid}}, then making a DELETE request to /users/{{userid}} will completely remove that user.\"\r\n                }\r\n              </li>\r\n            </ul>\r\n            <br />\r\n          </li>\r\n          <li>\r\n            <Heading title=\"Status codes\" />\r\n            <Content>\r\n              Status codes are 3 digit numbers that are returned by the API.\r\n              They resemble the status of the API and could be used to perform\r\n              further tasks.\r\n            </Content>\r\n            <ul>\r\n              <li>\r\n                <SubHeading title=\"Successful responses\" />\r\n                <Content>\r\n                  The entire 2xx series represents the successful response.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Client error responses\" />\r\n                <Content>\r\n                  The 4xx series represents that something went wrong on the\r\n                  client side.\r\n                </Content>\r\n              </li>\r\n              <li>\r\n                <SubHeading title=\"Server error responses\" />\r\n                <Content>\r\n                  The 5xx series represents that something went wrong on the\r\n                  server side.\r\n                </Content>\r\n              </li>\r\n            </ul>\r\n            <br />\r\n            <Table striped bordered hover className=\"text-left\">\r\n              <thead>\r\n                <tr className=\"text-center\">\r\n                  <th>Status Code</th>\r\n                  <th>API result</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>200</td>\r\n                  <td>Ok</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>201</td>\r\n                  <td>created</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>204</td>\r\n                  <td>No content</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>400</td>\r\n                  <td>\r\n                    Bad request (might be invalid syntax or some missing\r\n                    parameter)\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>401</td>\r\n                  <td>\r\n                    Unauthorized (Although it is named as unauthorized, but it\r\n                    means unauthenticated)\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>403</td>\r\n                  <td>\r\n                    Forbidden (client is authenticated by doesn’t have the\r\n                    rights to access the content)\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>404</td>\r\n                  <td>Not Found</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>415</td>\r\n                  <td>Unsupported media format</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>500</td>\r\n                  <td>\r\n                    Internal Server Error (The server has encountered a\r\n                    situation it doesn't know how to handle)\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>502</td>\r\n                  <td>Bad Gateway</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>504</td>\r\n                  <td>\r\n                    Timeout (It took server too long to fetch the response and\r\n                    return it)\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </li>\r\n        </ol>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default API;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Card } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Btn from \"../Components/Btn\";\r\nimport Input from \"../Components/Input\";\r\nimport PageHeading from \"../Components/PageHeading\";\r\nimport { setLocalData } from \"../Utils/LocalStorage\";\r\nimport { authUrl } from \"../config/baseUrl\";\r\nimport AuthRedirect from \"../Components/AuthRedirect\";\r\nimport { validateEmail, validatePhone } from \"../Utils/Validation.js\";\r\n\r\nconst Signup = () => {\r\n  const history = useHistory();\r\n  const [contactNumber, setContact] = useState();\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n  const [error, setError] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const validate = () => {\r\n    setError(\"\");\r\n    if (!name) {\r\n      setError(\"Please enter your name\");\r\n    } else if (!email) {\r\n      setError(\"Email is required\");\r\n      return false;\r\n    } else if (validateEmail(email)) {\r\n      setError(\"Invalid Email\");\r\n      return false;\r\n    } else if (!password) {\r\n      setError(\"Password is required\");\r\n      return false;\r\n    } else if (confirmPassword === \"\") {\r\n      setError(\" Please confirm your password\");\r\n    } else if (password !== confirmPassword) {\r\n      setError(\"Passwords do not match\");\r\n    } else if (validatePhone(contactNumber)) {\r\n      setError(\"Invalid Contact Number\");\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleSignup = async () => {\r\n    if (validate()) {\r\n      let data = { name, confirmPassword, email, password, contactNumber };\r\n      setLoading(true);\r\n\r\n      let result = await fetch(`${authUrl}/signup`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (result.status === 200 || result.status === 201) {\r\n        result = await result.json();\r\n        const user = {\r\n          name: result.name,\r\n          email: result.email,\r\n          role: result.role,\r\n        };\r\n        setLocalData(\"heapifyUser\", user);\r\n\r\n        setLoading(false);\r\n        history.push(\"/dashboard\");\r\n        return result;\r\n      } else {\r\n        result = await result.json();\r\n        setLoading(false);\r\n        setError(result.message);\r\n        return result;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageHeading>Heapify React Able</PageHeading>\r\n      <Container className=\"pageSection d-flex justify-content-center align-items-center\">\r\n        <Card style={{ width: \"31rem\" }} className=\"shadow-lg\">\r\n          <Card.Body>\r\n            <Card.Title className=\"text-center\">Sign up</Card.Title>\r\n            <form type=\"submit\" onSubmit={handleSignup} className=\"text-center\">\r\n              <Input\r\n                title=\"Name\"\r\n                type=\"text\"\r\n                placeholder=\"Enter your name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                value={name}\r\n              />\r\n              <Input\r\n                title=\"Email\"\r\n                type=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                value={email}\r\n              />\r\n              <Input\r\n                title=\"Password\"\r\n                type=\"password\"\r\n                placeholder=\"Set your password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                value={password}\r\n              />\r\n              <Input\r\n                title=\"Confirm Password\"\r\n                type=\"password\"\r\n                placeholder=\"Confirm password\"\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                value={confirmPassword}\r\n              />\r\n              <Input\r\n                title=\"Contact No.\"\r\n                type=\"tel\"\r\n                placeholder=\"Enter your contact number\"\r\n                onChange={(e) => setContact(e.target.value)}\r\n                value={contactNumber}\r\n              />\r\n              {error ? (\r\n                <div\r\n                  className=\"text-danger mb-4 p-2 border border-danger\"\r\n                  style={{ backgroundColor: \"#fae8e8\" }}\r\n                >\r\n                  {error}\r\n                </div>\r\n              ) : null}\r\n              <Btn\r\n                variant=\"primary\"\r\n                onClick={handleSignup}\r\n                loading={isLoading}\r\n                title=\"Register\"\r\n              />\r\n            </form>\r\n            <AuthRedirect\r\n              msg=\"Already have an account?\"\r\n              title=\"Login\"\r\n              redirect=\"login\"\r\n            />\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Login from \"../Pages/Login\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Basics from \"../Pages/React-Able-Notes/Basics\";\r\nimport Home from \"../Pages/Dashboard\";\r\nimport { getLocalData } from \"../Utils/LocalStorage\";\r\nimport HomePage from \"../Pages/Home/HomePage\";\r\nimport JSX from \"../Pages/React-Able-Notes/JSX\";\r\nimport StateProps from \"../Pages/React-Able-Notes/State-Props\";\r\nimport ElementsComponents from \"../Pages/React-Able-Notes/ElementsComponents\";\r\nimport Styles from \"../Pages/React-Able-Notes/Styles\";\r\nimport DOM from \"../Pages/React-Able-Notes/DOM\";\r\nimport LifecycleMethods from \"../Pages/React-Able-Notes/LifecycleMethods\";\r\nimport Hooks from \"../Pages/React-Able-Notes/Hooks\";\r\nimport NpmArrayMethods from \"../Pages/React-Able-Notes/NpmArrayMethods\";\r\nimport EventHandling from \"../Pages/React-Able-Notes/EventHandling\";\r\nimport ContextAPI from \"../Pages/React-Able-Notes/ConextAPI\";\r\nimport ReactRouter from \"../Pages/React-Able-Notes/ReactRouter\";\r\nimport API from \"../Pages/React-Able-Notes/API\";\r\nimport Signup from \"../Pages/Signup\";\r\n\r\nconst Routers = () => {\r\n  const checkAuth = () => {\r\n    const name = getLocalData(\"heapifyUser\");\r\n\r\n    if (name !== null) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const redirectToUrl = (url) => {\r\n    window.location.href = url;\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        {/* <Route exact path='/home' component={HomePage} /> */}\r\n        <Route\r\n          exact\r\n          path=\"/login\"\r\n          render={() => {\r\n            if (!checkAuth()) return <Route component={Login} />;\r\n            else return <Redirect to=\"/dashboard\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/signup\"\r\n          render={() => {\r\n            if (!checkAuth()) return <Route component={Signup} />;\r\n            else return <Redirect to=\"/dashboard\" />;\r\n          }}\r\n        />\r\n        <Route exact path=\"/login\" component={Login} />;\r\n        <Route\r\n          exact\r\n          path=\"/dashboard\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={Home} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/basics\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={Basics} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/elements-components\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={ElementsComponents} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/JSX\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={JSX} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/state-props\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={StateProps} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/Styles\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={Styles} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/DOM\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={DOM} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/lifecycle-methods\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={LifecycleMethods} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/hooks\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={Hooks} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/npm-array-methods\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={NpmArrayMethods} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/event-handling\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={EventHandling} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/context-API\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={ContextAPI} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/react-router\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={ReactRouter} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/prep-check\"\r\n          component={() =>\r\n            redirectToUrl(\r\n              \"https://docs.google.com/forms/d/e/1FAIpQLSezgw43DjSYP3RjS2jSExXpsFhJwjS_ioONuKBO8BwdS7lXGQ/viewform?usp=sf_link\"\r\n            )\r\n          }\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/react-able\"\r\n          component={() =>\r\n            redirectToUrl(\r\n              \"https://docs.google.com/forms/d/e/1FAIpQLSfXyzjPI9ZKfdkuGUiMRJPTRSlTorH5RvVyV-H45k1n-Fn9Ww/viewform?usp=sf_link\"\r\n            )\r\n          }\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/ReactAble/API\"\r\n          render={() => {\r\n            if (checkAuth()) return <Route component={API} />;\r\n            else return <Redirect to=\"/login\" />;\r\n          }}\r\n        />\r\n        <Redirect to=\"/login\" />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default Routers;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Routers from \"./Routers/Routers\";\r\n\r\nimport ReactGA from \"react-ga\";\r\n\r\nReactGA.initialize(\"G-Q4RP4T25HE\");\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.addEventListener(\"contextmenu\", (e) => {\r\n      e.preventDefault();\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (\r\n        event.ctrlKey === true ||\r\n        event.which === \"118\" ||\r\n        event.which === \"86\"\r\n      ) {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Routers />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}